# -*- coding: utf-8 -*-
"""EmailGenerator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19MB2uf4nkFfgWPyVWZ2HzxBkAmK2fHdy
"""

!pip install -q langchain
!pip install -qU langchain-groq
!pip install -q chromadb
!pip install -U langchain_community
!pip install -q langchain-core
!pip install -q pandas numpy

from langchain_groq import ChatGroq

llm = ChatGroq(
    temperature = 0,
    model = "llama-3.1-8b-instant", # Updated model name
    groq_api_key = "",
    max_tokens = None,
    timeout = None,
    max_retries=2
)

response = llm.invoke("When was the first AI model created , by whom and what was its name")
print(response.content)

import chromadb

client = chromadb.Client()
collection = client.get_or_create_collection("my_collection")

collection.add(
    documents = [
        "Welcome to delhi",
        "Welcome to New York"
    ],
    ids = ['id1','id2']
)

results = collection.query(
    query_texts= ['How big is statue of liberty'],
    n_results= 2
)
results

from langchain_community.document_loaders import WebBaseLoader

loader = WebBaseLoader(
    web_path = "https://www.python.org/doc/"
)
docs = loader.load()

page_data = docs[0].page_content

from langchain.prompts import PromptTemplate

prompt_extract = PromptTemplate.from_template(
    """
    ### SCRAPED TEXT FROM WEBSIRE:
    (page data)
    The scraped text is from carrers page of a website,
    your job is to extract the job postings abd return them in json format containing the
    following keys : "role" , "experience" , "skills" and "description"
    Only return valid JSON.
    ### VALID JSON (NO PREAMBLE, NO EXPLANATION, NO MARKDOWN WRAPPING):
    """
)

chain_extract = prompt_extract | llm
res = chain_extract.invoke({"page_data" : page_data})
print(res.content)

from langchain_core.output_parsers import JsonOutputParser

json_parser = JsonOutputParser()
json_res = json_parser.parse(res.content)
type(json_res)

import pandas as pd

mail = pd.read_csv('/content/mails.csv')

print(mail.columns.tolist())

mail.head(3)

import chromadb

client = chromadb.PersistentClient(path = 'vectorstore')
collection = client.get_or_create_collection(name = "portfolio")

if not collection.count():
  for _,row in mail.iterrows():
    collection.add(documents=[row['Tech_Stack']],
                   metadatas=[{"Careers_Link" : row["Careers_Link"]}],
                   ids = [str(row['ID'])]
    )

links = collection.query(
    query_texts = ['Machine Learning' , 'Tensorflow'] ,
    n_results = 3
)
links

from langchain.prompts import PromptTemplate

prompt_email = PromptTemplate.from_template(

    """
    ### JOB DESCRIPTION:
   {JOB DESCRIPTION}
   ### LINK TO RESUME:
   {link}

   ### INSTRUCTIONS:


    You are a professional cold email writer. Your task is to generate cold emails on behalf of a motivated and skilled candidate writing to a company for internship or collaboration opportunities.

You will write the email in first person ("I") from the perspective of the sender.

Goals:
- Clearly state the purpose of the email in the first paragraph.
- Briefly introduce the sender’s background and technical strengths.
- Tailor the message to the type of company being contacted (e.g., startup, fintech, AI firm).
- Clearly explain how the sender’s skills can add value to the company.
- Mention 2–3 specific offerings such as:
  - AI/ML project prototyping
  - Automating internal workflows using LLMs or ML pipelines
  - Building intelligent dashboards
  - Contributing to backend development or data pipeline optimization
  - Performing market or user analysis using data science
- End with a clear and polite CTA (call to action), such as asking to connect or discuss over a call.

Constraints:
- No preamble or extra instruction outside the email content.
- Keep it concise, impactful, and personalized.
- Use a professional yet conversational tone.
### EMAIL(NO PREAMBLE):
"""

)

chain_email = prompt_email | llm
res = chain_email.invoke({"JOB DESCRIPTION" : str(res) , "link" : links})
print(res.content)
